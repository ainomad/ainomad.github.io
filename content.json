{"pages":[{"title":"","text":"","link":"/404.html"},{"title":"About Minkyu Choi","text":"Intro.안녕하세요. 물리와 우주 덕후 프로그래머 문동욱입니다.현재 서울에 거주하며 대한민국의 IT 회사를 돌아다니면서 프론트엔드 개발자로 일하고 있습니다 :) Github LinkedIn Email #contact-buttons { width: 100%; display: flex; } #contact-butons a.button { flex-grow: 1; } @media screen and (max-width: 720px) { #contact-buttons a.button { width: 100%; margin-right: 0; } } Toy Project필요해서 만든 김에 공유하고 싶거나, 재미 혹은 개인 만족을 위해서 만드는 프로젝트들.잡다한 건 여러가지 있지만 지금 관심을 쏟고 애정을 부어주고 있는 프로젝트만 블로그에 공유합니다. 컨트리뷰팅은 언제나 환영합니다. 같이 놀아요. 1. Solar System TSGithub RepositoryLive Demo TypeScript, Vue.js, Three.js(WebGL)을 사용해 제작한 실시간 태양계 시뮬레이터!중력을 사용하여 구현하려고 했으나 천체의 질량 데이터가 미묘하게 맞지 않는건지 뭔지 궤도가 제 멋대로 돌아서 일단 보류.대신 케플러 궤도 6요소와 케플러 방정식 + 레가르 다항식을 사용하여 현재 날짜에 해당 행성이 어디에 있는지 위치를 추적하는 방향으로 변경함. 해야 하는 것 3D 렌더링 최적화. 어디서 메모리 릭이 있는지 점점 느려짐. 행성의 대기 그래픽 구현. 데이터는 다 모아놨음! 행성을 클릭하면 행성의 정보가 표시되도록 하고 싶다. ThreeJS의 Raycaster 클래스를 사용하면 됨 현재는 카메라가 태양계 전체 모습을 봄, 행성을 따라다니게 함 두 가지 기능만 가지고 있는 데 여기에 지구의 위치에서 금성을 추적과 같은 기능을 달고 싶다. 그럼 내행성의 겉보기 역행 운동도 재현되지 않을까? 중력 모드 추가! 다체 문제가 난제다 보니 계산은 $O(n^2)$으로 할 수 밖에 없지만 그래도 지금보다는 이게 더 리소스가 적게들 것 같은 느낌적인 느낌… 게다가 지금은 행성 위치 오차를 뉴턴 랩슨 메소드로 보정하고 있어서 시간 복잡도가 너무 높다. 관련 포스팅 [JavaScript로 천체 구현하기] 케플러 6요소 알아보기 [JavaScript로 중력 구현하기] 1. 중력이란 무엇일까? 2. Simple ANNGithub RepositoryLive Demo TypeScript와 React, D3, ChartJS를 사용해 제작한 간단한 인공 신경망. 원래는 회사 세미나 발표 용도로 간단하게 만들었는데 생각보다 재밌어서 계속 건드는 중.미리 설정해놓은 개수에 맞는 노드와 레이어를 생성하여 학습 과정에서 $y$값의 변화와 Loss의 변화를 시각화하는 기능을 가지고 있다. 해야 하는 것 지금은 config 모듈에서 선언된 상수를 참조하여 노드와 레이어를 생성하는데, 이걸 사용자가 입력해서 자유롭게 네트워크를 생성할 수 있게 변경 학습 과정을 좀 더 잘 이해할 수 있는 다른 정보를 시각화 해줄 수는 없을까? 고민 중… Activation Function도 맘대로 선택할 수 있게 해주면 좋을 듯. 지금은 Sigmoid Function만 사용 가능하다. CNN도 한번 시각화 도전…? 근데 2차원을 어떻게 시각화 해줄 지 모르겠음. 관련 포스팅 3. WeathermanGithub RepositoryLive Demo 시계 + 날씨 + 미세먼지 정보 + 이쁜 사진 대시보드집에 노트북이 남길래 하나를 대시보드 전용으로 쓰려고 만든 웹 어플리케이션. 크롬 익스텐션인 Momentum를 쓰고 있었지만 비염이 심한 본인을 위해 미세먼지 농도도 함께 보고 싶었는데 얘네가 해당 기능 제공을 안해줘서 하나 새로 만들어서 쓰는 중.배경사진은 날씨에 따라 알맞은 사진으로 변경되어 사용자(나)가 굳이 구석에 있는 날씨 정보를 눈여겨 보지 않더라도 한 눈에 현재 날씨를 알아볼 수 있도록 함. 해야 하는 것 지금 사진 데이터를 JSON으로 관리하고 있는데 원래 목표는 Unsplash API를 사용하는 것이었음. 근데 API를 쓰려면 앱이 심사를 통과해야해서 귀찮… Open Weather API에서 사용하는 전세계 도시 정보를 지금 JSON으로 관리하는 데, 이걸 Firebase Realtime DB에 올려야함 유튜브 API 써서 음악도 재생되게 하고 싶다","link":"/about/index.html"}],"posts":[{"title":"hello world","text":"Hello WorldThumbnail EX path: /2017/05/03/calculate-orbit-1/thumbnail.jpg","link":"/2019/07/14/calculate-orbit-1/"},{"title":"[JavaScript로 중력 구현하기] 1. 중력이란 무엇일까?","text":"이번 포스팅에서는 만유인력의 법칙을 이용하여 중력을 구현해보려고 한다.지표면 상에서 한 방향으로 작용하는 중력이 아니라 랜덤한 질량을 가진 여러 개의 물체를 랜덤한 좌표에 뿌려놓고 서로의 운동에 어떻게 간섭하는 지를 살펴볼 수 있는 시뮬레이션을 만들어 볼 예정이다. 중력이란?먼저 이 포스팅은 물리학도가 아닌 필자같은 수학을 잘 못하는 사람을 대상으로 한 포스팅이기에 먼저 중력의 개념부터 제대로 짚고 넘어가려고 한다. 뉴턴께서 가라사대, 중력이란 두 개의 질량을 가진 물체가 서로 끌어당기는 힘이라고 했다.사실 뉴턴은 만유인력의 법칙이라는 공식을 만들면서 어떻게 중력이 작용하는가?는 알아냈지만 왜 중력이 생기는 것인지는 몰랐다. 아무래도 신께서만 아실 일이지…하고 넘어간 듯 싶다.그리고 뉴턴은 질량을 가진 물체가 중력을 가진다고 했었는데 이는 빛은 질량이 없기 때문에 중력에 영향을 전혀 받지않는다는 얘기가 된다. 하지만 현대에 와서 밝혀진 사실에 의하면 빛도 중력에 영향을 받는다.영화 인터스텔라에서도 보지 않았던가?(100% 확실한 시각화 묘사라고는 할 수 없지만 이론물리학자인 킵 손이 일반상대성이론을 계산해서 3D로 시각화했다고 한다.)블랙홀 같이 중력이 어마어마한 곳에서는 이 현상이 눈에 띄게 관찰되는데, 이를 중력렌즈효과라고 부른다. 블랙홀 뒤를 지나는 빛의 휘어짐 중력은 1915년 아인슈타인의 일반상대성이론에서 에너지에 의한 시공간의 휨으로 정의되게 된다.그래서 시공간 상의 물체의 질량이 급격하게 증가하거나 감소할 때 시공간에 파동이 생기게 되는데 이것이 바로 작년 초에 발견된 중력파이다.이렇게 발생된 중력파는 빛과 같은 속도로 움직인다고 한다. 그래서 갑자기 태양계에서 태양이 뿅!하고 사라지게 되면 태양 주위를 공전하던 행성들이 바로 궤도를 이탈해서 날아가는 게 아니다.예를 들어서 지구같은 경우에는 태양에서 나온 빛이 지구까지 약 8분 20초 정도 걸리니까 태양이 갑자기 사라져도 8분정도는 없어진 태양이 있던 위치를 그대로 공전하는 것이다.그러다가 8분 후 마지막에 태양에서 나온 빛이 지구에 도달하는 순간 지구는 궤도를 이탈할 것이다. 큰 질량을 가진 물체일수록 시공간을 더 많이 휘게 만든다 그렇다고 만유인력의 법칙이 틀렸다는 것이 아니라, 상대성이론은 만유인력의 법칙이 놓친 점을 보완해준 것에 더 가깝다.사실 중력이 아주 큰 공간(아주 많이 휘어진 공간)이 아니라면 만유인력의 법칙으로도 충분히 설명이 가능하다. 예를 들어 지구는 전체적으로 보면 커다란 구이지만 지구에 사는 우리가 주변을 돌아보면 이게 구인지 평면인지 알수가 없다.이와 같이 휘어진 정도가 아주아주 작아 유클리드 공간과 거의 유사한 공간을 유사-유클리드 공간이라고 한다.그리고 이런 유사-유클리드 공간에서는 만유인력의 법칙만 적용해도 충분하다. 아폴로 우주선을 달에 보낼때도 만유인력의 법칙만으로 충분했다고 한다. 그래서 결론적으로 중력을 구하는 것 = 시공간의 곡률을 구하는 것으로 볼 수 있지만,필자는 어렵고 복잡한 일반상대성이론까진 안쓸 것이고 쓰지도 못하고…그리고 만유인력의 법칙만으로도 간단한 시뮬레이션은 구현하기에 충분하다. 그래서 구현은 어떻게?일단 설명을 쉽게 하기 위해 랜덤한 질량을 가진 2개의 물체를 랜덤한 좌표에 랜덤한 방향과 속도를 가지게 설정한 후 그냥 공간 상에 뿌린다고 가정하자.이 물체 2개의 중력의 영향을 계산하는 것은 그다지 어렵지 않다. 여기서 만유인력의 법칙이 등장한다. F12=−Gm1m2∣r12∣2r12^F_{12} = -G{\\frac{m_1 m_2}{\\vert{r_{12}\\vert}^2}}\\hat{r_{12}}F​12​​=−G​∣r​12​​∣​2​​​​m​1​​m​2​​​​​r​12​​​^​​ 이 공식은 물체1이 물체2에게 가하는 중력 F를 구하는 공식이다. G는 중력상수를 의미하고,이 중력상수는 6.67384 * 10^-11이다. 그리고 분자의 m은 각 물체의 질량이고 분모인 r은 물체1과 물체2의 유클리드거리를 의미한다.그리고 마지막에 곱해주는 r은 물체1에서 물체2를 바라보고 있는 단위벡터를 의미한다. 그리고 중간에 있는 식을 보면 분모에 거리가 들어가있고 분자에 질량이 들어가있다.이는 두 물체간의 거리가 멀어질수록 분모가 커지니까 값은 작게 나오고, 두 물체의 질량이 커질수록 분자가 커지니까 값은 크게 나온다는 것을 의미하며,간단하게 말해서 중력은 두 물체 간 거리에 반비례하고 두 물체 간 질량의 곱에 비례한다라고 할 수 있다. 혹시 선형대수학을 안배우신 분들이 있을 지 모르니 간단하게 설명하면,벡터라는 놈은 공간 상에서의 방향을 의미한다는 정도만 알아두셔도 좋을 것 같다.지금 우리가 계산하려고 하는 공간은 3차원 공간이기 때문에 벡터는 (x, y, z) 3개의 좌표값을 가지게 된다. 우리가 어릴 때 배웠던 만유인력의 법칙은 F=Gm1m2r2F = G\\frac{m_1 m_2}{r^2}F=G​r​2​​​​m​1​​m​2​​​​ 의 꼴을 가지는데 이 공식의 결과는 1 5.2 1204같은 스칼라 값을 가지게 된다. 스칼라는 어떠한 물리량만을 의미하는 것이기 때문에중력이 얼마나 센지는 알 수 있어도 중력이 어느 방향으로 센지는 알 수가 없다. 그래서 힘의 방향을 표현해줘야 우리가 이 공식을 제대로 사용할 수 있고, 그렇기 때문에 마지막에 벡터를 곱해주는 것이다. 그리고 공식 맨 앞에 -1이 붙어있는 이유는 벡터의 방향 때문이다. 마지막에 우리가 곱한 벡터는 물체1 -&gt; 물체2의 방향이다.하지만 중력은 내 쪽으로 끌어당기는 힘이지 밀어내는 힘이 아니기 때문에 따라서 힘의 방향을 물체1 &lt;- 물체2와 같이 반대로 바꿔줘야 하기 때문에 -1을 곱해주는 것이다. 조금 복잡해보이지만 막상 코드로 구현하면 간단하다. 필자는 ThreeJS를 사용하여 벡터 계산을 진행하였다. 1234567891011121314151617181920import { Vector3 } from 'three';function calcGravity(o1, o2, G) { // o1의 위치벡터와 o2의 위치벡터의 차를 구해 o1 -&gt; o2를 바라보는 벡터를 구한다. let force = new Vector3().subVectors(o1.location, o2.location); // 위에서 구한 방향벡터의 길이를 구한 후 절대값으로 변환해준다. const distance = Math.sqrt(force.length() ** 2); // 위에서 구한 방향벡터를 단위벡터로 바꿔준다. force = force.normalize(); // 중력 스칼라 구하기 const strength = -(G * o1.mass * o2.mass) / (distance ** 2); // 방향벡터에 위에서 구한 중력 스칼라를 곱해준다 force = force.multiplyScalar(strength); return force;} 이제 여기서 나온 값을 계산 대상이 되는 현재 물체의 위치값에 계속 더해주면 물체는 그 방향으로 운동하게 될 것이다.근데 문제는 실질적으로 우리는 2개만 뿌릴 것이 아니라는 것이다.저 만유인력의 법칙은 2개의 물체 간의 중력 만을 생각하고 계산하고 있다. 근데 우리는 여러 개의 물체에 동시에(!) 받는 중력을 계산하고 싶은데? 아쉽게도 이런 다체문제는 수리물리학분야에서 손꼽히는 난제이며,1887년에 앙리 푸엥카레가 삼체 이상 문제의 일반해를 구하는 것이 불가능하다라고 했단다.그래서 우리는 저 위에 있는 이체문제의 만유인력의 법칙을 사용해서 중력을 근사적으로 구하는 수 밖에 없다.다음 포스팅에서는 직접 JavaScript코드로 시뮬레이션을 구현해보도록 하겠다. 에서는 간단한 중력 모델 샘플을 코드로 구현해볼 예정이다.이상으로 JavaScript로 중력 구현하기 첫번째 포스팅을 마친다.","link":"/2017/05/06/gravity-via-js-1/"}],"tags":[{"name":"test1","slug":"test1","link":"/tags/test1/"},{"name":"test2","slug":"test2","link":"/tags/test2/"},{"name":"물리학","slug":"물리학","link":"/tags/물리학/"},{"name":"일반물리","slug":"일반물리","link":"/tags/일반물리/"},{"name":"이론","slug":"이론","link":"/tags/이론/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"},{"name":"Physics","slug":"physics","link":"/categories/physics/"}]}